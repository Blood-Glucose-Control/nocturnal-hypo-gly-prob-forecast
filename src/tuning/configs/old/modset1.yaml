# NaiveForecaster:
#   strategy:
#     type: list
#     values: ["last", "mean", "drift"]


AutoARIMA:
  start_p:
    type: int
    range: [1, 5]
  max_p:
    type: int
    range: [1, 5]
  start_q:
    type: int
    range: [1, 5]
  max_q:
    type: int
    range: [1, 5]
  # d:
  #   type: list
  #   values: [0, 1, 2, None]
  # max_d:
  #   type: list
  #   values: [1, 2, 3]
  # start_P:
  #   type: list
  #   values: [0, 1, 2]
  # max_P:
  #   type: list
  #   values: [1, 2, 3]
  # D:
  #   type: list
  #   values: [0, 1, None]
  # max_D:
  #   type: int
  #   range: [1, 20]
  # start_Q:
  #   type: int
  #   range: [1, 20]
  # max_Q:
  #   type: int
  #   range: [1, 20]


# DartsLinearRegressionModel:
#   lags:
#     type: list
#     values: [[-1], [-1, -2], [-1, -3], [1, 2, 3]] # Typically negative values for lagged target predictions.
#   output_chunk_length:
#     type: int
#     range: [1, 10] # Controls the forecast horizon chunk size. Optimal range depends on dataset and forecast accuracy.
#   add_encoders:
#     type: list
#     values: [
#         { "cyclic": { "future": ["month"] } },
#         { "datetime_attribute": { "future": ["hour", "dayofweek"] } },
#         { "custom": { "past": [lambda idx: (idx.year - 1950) / 50] } },
#         { "transformer": "Scaler()" },
#       ] # Enables feature encoding and transformation. Use based on data type and model complexity.
#   likelihood:
#     type: list
#     values: ["poisson", "quantile"] # Choose depending on whether you need probabilistic outputs.

# StatsModelsARIMA:
#   order:
#     type: list
#     values: [[1, 1, 1], [2, 1, 2], [3, 1, 0]] # (p, d, q) values for AR, differencing, and MA components
#   seasonal_order:
#     type: list
#     values: [[0, 0, 0, 0], [1, 1, 1, 12], [0, 1, 1, 12], [1, 0, 0, 24]] # Seasonal components (P, D, Q, s)
#   trend:
#     type: list
#     values: ["n", "c", "t", "ct", [1, 1, 0, 1]] # 'c': constant, 't': linear, 'ct': constant+linear, polynomial as iterable
#   enforce_stationarity:
#     type: bool
#   enforce_invertibility:
#     type: bool
#   concentrate_scale:
#     type: bool
#   freq:
#     type: list
#     values: ["m"] # Frequency of time series (minute)
#   missing:
#     type: list
#     values: ["none", "drop", "raise"] # Handling missing values in data
#   method:
#     type: list
#     values:
#       [
#         "statespace",
#         "innovations_mle",
#         "hannan_rissanen",
#         "burg",
#         "innovations",
#         "yule_walker",
#       ]
#   gls:
#     type: bool
#   cov_type:
#     type: list
#     values: ["opg", "oim", "approx", "robust", "robust_approx", "none"] # Covariance type options
# StatsModelsARIMA:
#   order:
#     type: list
#     values: [[1, 1, 1], [2, 1, 2], [3, 1, 0]] # (p, d, q) values for AR, differencing, and MA components
#   seasonal_order:
#     type: list
#     values: [[0, 0, 0, 0], [1, 1, 1, 12], [0, 1, 1, 12], [1, 0, 0, 24]] # Seasonal components (P, D, Q, s)
#   trend:
#     type: list
#     values: ["n", "c", "t", "ct", [1, 1, 0, 1]] # 'c': constant, 't': linear, 'ct': constant+linear, polynomial as iterable
#   enforce_stationarity:
#     type: bool
#   enforce_invertibility:
#     type: bool
#   concentrate_scale:
#     type: bool
#   freq:
#     type: list
#     values: ["m"] # Frequency of time series (minute)
#   missing:
#     type: list
#     values: ["none", "drop", "raise"] # Handling missing values in data
#   method:
#     type: list
#     values:
#       [
#         "statespace",
#         "innovations_mle",
#         "hannan_rissanen",
#         "burg",
#         "innovations",
#         "yule_walker",
#       ]
#   gls:
#     type: bool
#   cov_type:
#     type: list
#     values: ["opg", "oim", "approx", "robust", "robust_approx", "none"] # Covariance type options

# UnobservedComponents:
#   level:
#     type: bool
#   trend:
#     type: bool
#   seasonal:
#     type: list
#     values: [12, 24, 4] # Period of the seasonal component (e.g., 12 for monthly seasonality)
#   freq_seasonal:
#     type: list
#     values: [
#         [{ "period": 12 }], # Seasonal component with period 12 (e.g., monthly)
#         [{ "period": 24, "harmonics": 2 }], # Seasonal component with period 24 and 2 harmonics
#         [{ "period": 4 }], # Seasonal component with period 4 (e.g., quarterly)
#       ] # Frequency-domain seasonal components
#   cycle:
#     type: bool
#   autoregressive:
#     type: list
#     values: [1, 2] # Order of the autoregressive component
#   irregular:
#     type: bool
#   stochastic_level:
#     type: bool
#   stochastic_trend:
#     type: bool
#   stochastic_seasonal:
#     type: bool
#   stochastic_cycle:
#     type: bool
#   damped_cycle:
#     type: bool
#   mle_regression:
#     type: bool
#   use_exact_diffuse:
#     type: bool
#   cov_type:
#     type: list
#     values: ["opg", "oim", "approx", "robust", "robust_approx", "none"] # Method for calculating covariance matrix
#   method:
#     type: list
#     values: ["lbfgs", "bfgs", "newton", "nm", "powell", "cg", "basinhopping"] # Optimization method
#   full_output:
#     type: list
#     values: [False] # Whether to return all available output
#   optim_score:
#     type: list
#     values: ["harvey", "approx", None] # Method for calculating score vector
#   optim_complex_step:
#     type: bool
#   optim_hessian:
#     type: list
#     values: ["opg", "oim", "approx"] # Method for approximating Hessian matrix
# UnobservedComponents:
#   level:
#     type: bool
#   trend:
#     type: bool
#   seasonal:
#     type: list
#     values: [12, 24, 4] # Period of the seasonal component (e.g., 12 for monthly seasonality)
#   freq_seasonal:
#     type: list
#     values: [
#         [{ "period": 12 }], # Seasonal component with period 12 (e.g., monthly)
#         [{ "period": 24, "harmonics": 2 }], # Seasonal component with period 24 and 2 harmonics
#         [{ "period": 4 }], # Seasonal component with period 4 (e.g., quarterly)
#       ] # Frequency-domain seasonal components
#   cycle:
#     type: bool
#   autoregressive:
#     type: list
#     values: [1, 2] # Order of the autoregressive component
#   irregular:
#     type: bool
#   stochastic_level:
#     type: bool
#   stochastic_trend:
#     type: bool
#   stochastic_seasonal:
#     type: bool
#   stochastic_cycle:
#     type: bool
#   damped_cycle:
#     type: bool
#   mle_regression:
#     type: bool
#   use_exact_diffuse:
#     type: bool
#   cov_type:
#     type: list
#     values: ["opg", "oim", "approx", "robust", "robust_approx", "none"] # Method for calculating covariance matrix
#   method:
#     type: list
#     values: ["lbfgs", "bfgs", "newton", "nm", "powell", "cg", "basinhopping"] # Optimization method
#   full_output:
#     type: list
#     values: [False] # Whether to return all available output
#   optim_score:
#     type: list
#     values: ["harvey", "approx", None] # Method for calculating score vector
#   optim_complex_step:
#     type: bool
#   optim_hessian:
#     type: list
#     values: ["opg", "oim", "approx"] # Method for approximating Hessian matrix
